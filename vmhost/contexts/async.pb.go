// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: async.proto

package contexts

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_kalyan3104_k_chain_core_go_data "github.com/kalyan3104/k-chain-core-go/data"
	vmhost "github.com/kalyan3104/k-chain-vm-go/vmhost"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SerializableCallType int32

const (
	DirectCall             SerializableCallType = 0
	AsynchronousCall       SerializableCallType = 1
	AsynchronousCallBack   SerializableCallType = 2
	DCDTTransferAndExecute SerializableCallType = 3
)

var SerializableCallType_name = map[int32]string{
	0: "DirectCall",
	1: "AsynchronousCall",
	2: "AsynchronousCallBack",
	3: "DCDTTransferAndExecute",
}

var SerializableCallType_value = map[string]int32{
	"DirectCall":             0,
	"AsynchronousCall":       1,
	"AsynchronousCallBack":   2,
	"DCDTTransferAndExecute": 3,
}

func (SerializableCallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{0}
}

type SerializableVMOutput struct {
	ReturnData      [][]byte                              `protobuf:"bytes,1,rep,name=ReturnData,proto3" json:"ReturnData,omitempty"`
	ReturnCode      uint64                                `protobuf:"varint,2,opt,name=ReturnCode,proto3" json:"ReturnCode,omitempty"`
	ReturnMessage   string                                `protobuf:"bytes,3,opt,name=ReturnMessage,proto3" json:"ReturnMessage,omitempty"`
	GasRemaining    uint64                                `protobuf:"varint,4,opt,name=GasRemaining,proto3" json:"GasRemaining,omitempty"`
	GasRefund       *math_big.Int                         `protobuf:"bytes,5,opt,name=GasRefund,proto3,casttypewith=math/big.Int;github.com/kalyan3104/k-chain-core-go/data.BigIntCaster" json:"Value"`
	OutputAccounts  map[string]*SerializableOutputAccount `protobuf:"bytes,6,rep,name=OutputAccounts,proto3" json:"OutputAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeletedAccounts [][]byte                              `protobuf:"bytes,7,rep,name=DeletedAccounts,proto3" json:"DeletedAccounts,omitempty"`
	TouchedAccounts [][]byte                              `protobuf:"bytes,8,rep,name=TouchedAccounts,proto3" json:"TouchedAccounts,omitempty"`
	Logs            *SerializableLogEntry                 `protobuf:"bytes,9,opt,name=Logs,proto3" json:"Logs,omitempty"`
}

func (m *SerializableVMOutput) Reset()      { *m = SerializableVMOutput{} }
func (*SerializableVMOutput) ProtoMessage() {}
func (*SerializableVMOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{0}
}
func (m *SerializableVMOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableVMOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableVMOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableVMOutput.Merge(m, src)
}
func (m *SerializableVMOutput) XXX_Size() int {
	return m.Size()
}
func (m *SerializableVMOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableVMOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableVMOutput proto.InternalMessageInfo

func (m *SerializableVMOutput) GetReturnData() [][]byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *SerializableVMOutput) GetReturnCode() uint64 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *SerializableVMOutput) GetReturnMessage() string {
	if m != nil {
		return m.ReturnMessage
	}
	return ""
}

func (m *SerializableVMOutput) GetGasRemaining() uint64 {
	if m != nil {
		return m.GasRemaining
	}
	return 0
}

func (m *SerializableVMOutput) GetGasRefund() *math_big.Int {
	if m != nil {
		return m.GasRefund
	}
	return nil
}

func (m *SerializableVMOutput) GetOutputAccounts() map[string]*SerializableOutputAccount {
	if m != nil {
		return m.OutputAccounts
	}
	return nil
}

func (m *SerializableVMOutput) GetDeletedAccounts() [][]byte {
	if m != nil {
		return m.DeletedAccounts
	}
	return nil
}

func (m *SerializableVMOutput) GetTouchedAccounts() [][]byte {
	if m != nil {
		return m.TouchedAccounts
	}
	return nil
}

func (m *SerializableVMOutput) GetLogs() *SerializableLogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

type SerializableOutputTransfer struct {
	Value         *math_big.Int        `protobuf:"bytes,1,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/kalyan3104/k-chain-core-go/data.BigIntCaster" json:"Value"`
	GasLimit      uint64               `protobuf:"varint,2,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasLocked     uint64               `protobuf:"varint,3,opt,name=GasLocked,proto3" json:"GasLocked,omitempty"`
	Data          []byte               `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	CallType      SerializableCallType `protobuf:"varint,5,opt,name=CallType,proto3,enum=contexts.SerializableCallType" json:"CallType,omitempty"`
	SenderAddress []byte               `protobuf:"bytes,6,opt,name=SenderAddress,proto3" json:"SenderAddress,omitempty"`
}

func (m *SerializableOutputTransfer) Reset()      { *m = SerializableOutputTransfer{} }
func (*SerializableOutputTransfer) ProtoMessage() {}
func (*SerializableOutputTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{1}
}
func (m *SerializableOutputTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableOutputTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableOutputTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableOutputTransfer.Merge(m, src)
}
func (m *SerializableOutputTransfer) XXX_Size() int {
	return m.Size()
}
func (m *SerializableOutputTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableOutputTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableOutputTransfer proto.InternalMessageInfo

func (m *SerializableOutputTransfer) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SerializableOutputTransfer) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *SerializableOutputTransfer) GetGasLocked() uint64 {
	if m != nil {
		return m.GasLocked
	}
	return 0
}

func (m *SerializableOutputTransfer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SerializableOutputTransfer) GetCallType() SerializableCallType {
	if m != nil {
		return m.CallType
	}
	return DirectCall
}

func (m *SerializableOutputTransfer) GetSenderAddress() []byte {
	if m != nil {
		return m.SenderAddress
	}
	return nil
}

type SerializableStorageUpdate struct {
	Offset  []byte `protobuf:"bytes,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Written bool   `protobuf:"varint,3,opt,name=Written,proto3" json:"Written,omitempty"`
}

func (m *SerializableStorageUpdate) Reset()      { *m = SerializableStorageUpdate{} }
func (*SerializableStorageUpdate) ProtoMessage() {}
func (*SerializableStorageUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{2}
}
func (m *SerializableStorageUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableStorageUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableStorageUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableStorageUpdate.Merge(m, src)
}
func (m *SerializableStorageUpdate) XXX_Size() int {
	return m.Size()
}
func (m *SerializableStorageUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableStorageUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableStorageUpdate proto.InternalMessageInfo

func (m *SerializableStorageUpdate) GetOffset() []byte {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *SerializableStorageUpdate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SerializableStorageUpdate) GetWritten() bool {
	if m != nil {
		return m.Written
	}
	return false
}

type SerializableOutputAccount struct {
	Address             []byte                                `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Nonce               uint64                                `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Balance             *math_big.Int                         `protobuf:"bytes,3,opt,name=Balance,proto3,casttypewith=math/big.Int;github.com/kalyan3104/k-chain-core-go/data.BigIntCaster" json:"Balance"`
	StorageUpdates      map[string]*SerializableStorageUpdate `protobuf:"bytes,4,rep,name=StorageUpdates,proto3" json:"StorageUpdates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code                []byte                                `protobuf:"bytes,5,opt,name=Code,proto3" json:"Code,omitempty"`
	CodeMetadata        []byte                                `protobuf:"bytes,6,opt,name=CodeMetadata,proto3" json:"CodeMetadata,omitempty"`
	CodeDeployerAddress []byte                                `protobuf:"bytes,7,opt,name=CodeDeployerAddress,proto3" json:"CodeDeployerAddress,omitempty"`
	BalanceDelta        *math_big.Int                         `protobuf:"bytes,8,opt,name=BalanceDelta,proto3,casttypewith=math/big.Int;github.com/kalyan3104/k-chain-core-go/data.BigIntCaster" json:"BalanceDelta"`
	OutputTransfers     []*SerializableOutputTransfer         `protobuf:"bytes,9,rep,name=OutputTransfers,proto3" json:"OutputTransfers,omitempty"`
	GasUsed             uint64                                `protobuf:"varint,10,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
}

func (m *SerializableOutputAccount) Reset()      { *m = SerializableOutputAccount{} }
func (*SerializableOutputAccount) ProtoMessage() {}
func (*SerializableOutputAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{3}
}
func (m *SerializableOutputAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableOutputAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableOutputAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableOutputAccount.Merge(m, src)
}
func (m *SerializableOutputAccount) XXX_Size() int {
	return m.Size()
}
func (m *SerializableOutputAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableOutputAccount.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableOutputAccount proto.InternalMessageInfo

func (m *SerializableOutputAccount) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SerializableOutputAccount) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SerializableOutputAccount) GetBalance() *math_big.Int {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *SerializableOutputAccount) GetStorageUpdates() map[string]*SerializableStorageUpdate {
	if m != nil {
		return m.StorageUpdates
	}
	return nil
}

func (m *SerializableOutputAccount) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *SerializableOutputAccount) GetCodeMetadata() []byte {
	if m != nil {
		return m.CodeMetadata
	}
	return nil
}

func (m *SerializableOutputAccount) GetCodeDeployerAddress() []byte {
	if m != nil {
		return m.CodeDeployerAddress
	}
	return nil
}

func (m *SerializableOutputAccount) GetBalanceDelta() *math_big.Int {
	if m != nil {
		return m.BalanceDelta
	}
	return nil
}

func (m *SerializableOutputAccount) GetOutputTransfers() []*SerializableOutputTransfer {
	if m != nil {
		return m.OutputTransfers
	}
	return nil
}

func (m *SerializableOutputAccount) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

type SerializableLogEntry struct {
	Identifier []byte   `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Address    []byte   `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Topics     [][]byte `protobuf:"bytes,3,rep,name=Topics,proto3" json:"Topics,omitempty"`
	Data       []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *SerializableLogEntry) Reset()      { *m = SerializableLogEntry{} }
func (*SerializableLogEntry) ProtoMessage() {}
func (*SerializableLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{4}
}
func (m *SerializableLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableLogEntry.Merge(m, src)
}
func (m *SerializableLogEntry) XXX_Size() int {
	return m.Size()
}
func (m *SerializableLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableLogEntry proto.InternalMessageInfo

func (m *SerializableLogEntry) GetIdentifier() []byte {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *SerializableLogEntry) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SerializableLogEntry) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *SerializableLogEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SerializableAsyncContext struct {
	Address                      []byte                               `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	CallID                       []byte                               `protobuf:"bytes,2,opt,name=CallID,proto3" json:"CallID,omitempty"`
	CallType                     SerializableCallType                 `protobuf:"varint,3,opt,name=CallType,proto3,enum=contexts.SerializableCallType" json:"CallType,omitempty"`
	CallerAddr                   []byte                               `protobuf:"bytes,4,opt,name=CallerAddr,proto3" json:"CallerAddr,omitempty"`
	ParentAddr                   []byte                               `protobuf:"bytes,5,opt,name=ParentAddr,proto3" json:"ParentAddr,omitempty"`
	CallerCallID                 []byte                               `protobuf:"bytes,6,opt,name=CallerCallID,proto3" json:"CallerCallID,omitempty"`
	CallbackAsyncInitiatorCallID []byte                               `protobuf:"bytes,7,opt,name=CallbackAsyncInitiatorCallID,proto3" json:"CallbackAsyncInitiatorCallID,omitempty"`
	Callback                     string                               `protobuf:"bytes,8,opt,name=Callback,proto3" json:"Callback,omitempty"`
	CallbackData                 []byte                               `protobuf:"bytes,9,opt,name=CallbackData,proto3" json:"CallbackData,omitempty"`
	GasAccumulated               uint64                               `protobuf:"varint,10,opt,name=GasAccumulated,proto3" json:"GasAccumulated,omitempty"`
	ReturnData                   []byte                               `protobuf:"bytes,11,opt,name=ReturnData,proto3" json:"ReturnData,omitempty"`
	AsyncCallGroups              []*vmhost.SerializableAsyncCallGroup `protobuf:"bytes,12,rep,name=asyncCallGroups,proto3" json:"asyncCallGroups,omitempty"`
	CallsCounter                 uint64                               `protobuf:"varint,13,opt,name=CallsCounter,proto3" json:"CallsCounter,omitempty"`
	TotalCallsCounter            uint64                               `protobuf:"varint,14,opt,name=TotalCallsCounter,proto3" json:"TotalCallsCounter,omitempty"`
	ChildResults                 *SerializableVMOutput                `protobuf:"bytes,15,opt,name=ChildResults,proto3" json:"ChildResults,omitempty"`
}

func (m *SerializableAsyncContext) Reset()      { *m = SerializableAsyncContext{} }
func (*SerializableAsyncContext) ProtoMessage() {}
func (*SerializableAsyncContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b2a03067ffcb1d, []int{5}
}
func (m *SerializableAsyncContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableAsyncContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableAsyncContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableAsyncContext.Merge(m, src)
}
func (m *SerializableAsyncContext) XXX_Size() int {
	return m.Size()
}
func (m *SerializableAsyncContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableAsyncContext.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableAsyncContext proto.InternalMessageInfo

func (m *SerializableAsyncContext) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SerializableAsyncContext) GetCallID() []byte {
	if m != nil {
		return m.CallID
	}
	return nil
}

func (m *SerializableAsyncContext) GetCallType() SerializableCallType {
	if m != nil {
		return m.CallType
	}
	return DirectCall
}

func (m *SerializableAsyncContext) GetCallerAddr() []byte {
	if m != nil {
		return m.CallerAddr
	}
	return nil
}

func (m *SerializableAsyncContext) GetParentAddr() []byte {
	if m != nil {
		return m.ParentAddr
	}
	return nil
}

func (m *SerializableAsyncContext) GetCallerCallID() []byte {
	if m != nil {
		return m.CallerCallID
	}
	return nil
}

func (m *SerializableAsyncContext) GetCallbackAsyncInitiatorCallID() []byte {
	if m != nil {
		return m.CallbackAsyncInitiatorCallID
	}
	return nil
}

func (m *SerializableAsyncContext) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *SerializableAsyncContext) GetCallbackData() []byte {
	if m != nil {
		return m.CallbackData
	}
	return nil
}

func (m *SerializableAsyncContext) GetGasAccumulated() uint64 {
	if m != nil {
		return m.GasAccumulated
	}
	return 0
}

func (m *SerializableAsyncContext) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *SerializableAsyncContext) GetAsyncCallGroups() []*vmhost.SerializableAsyncCallGroup {
	if m != nil {
		return m.AsyncCallGroups
	}
	return nil
}

func (m *SerializableAsyncContext) GetCallsCounter() uint64 {
	if m != nil {
		return m.CallsCounter
	}
	return 0
}

func (m *SerializableAsyncContext) GetTotalCallsCounter() uint64 {
	if m != nil {
		return m.TotalCallsCounter
	}
	return 0
}

func (m *SerializableAsyncContext) GetChildResults() *SerializableVMOutput {
	if m != nil {
		return m.ChildResults
	}
	return nil
}

func init() {
	proto.RegisterEnum("contexts.SerializableCallType", SerializableCallType_name, SerializableCallType_value)
	proto.RegisterType((*SerializableVMOutput)(nil), "contexts.SerializableVMOutput")
	proto.RegisterMapType((map[string]*SerializableOutputAccount)(nil), "contexts.SerializableVMOutput.OutputAccountsEntry")
	proto.RegisterType((*SerializableOutputTransfer)(nil), "contexts.SerializableOutputTransfer")
	proto.RegisterType((*SerializableStorageUpdate)(nil), "contexts.SerializableStorageUpdate")
	proto.RegisterType((*SerializableOutputAccount)(nil), "contexts.SerializableOutputAccount")
	proto.RegisterMapType((map[string]*SerializableStorageUpdate)(nil), "contexts.SerializableOutputAccount.StorageUpdatesEntry")
	proto.RegisterType((*SerializableLogEntry)(nil), "contexts.SerializableLogEntry")
	proto.RegisterType((*SerializableAsyncContext)(nil), "contexts.SerializableAsyncContext")
}

func init() { proto.RegisterFile("async.proto", fileDescriptor_83b2a03067ffcb1d) }

var fileDescriptor_83b2a03067ffcb1d = []byte{
	// 1131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0x23, 0xc5,
	0x13, 0xf7, 0xf8, 0x23, 0x71, 0xca, 0x5e, 0x27, 0xff, 0xde, 0x28, 0x9a, 0xbf, 0xb5, 0x9a, 0x58,
	0x66, 0x85, 0x2c, 0x44, 0xc6, 0x28, 0x1c, 0x80, 0xe5, 0x14, 0xc7, 0x51, 0x14, 0x29, 0xd9, 0x45,
	0x13, 0xef, 0x22, 0xf6, 0x82, 0xda, 0x33, 0x6d, 0x7b, 0x94, 0xf1, 0xb4, 0x35, 0xdd, 0x13, 0x25,
	0x08, 0x24, 0x1e, 0x81, 0x07, 0xe0, 0x01, 0x10, 0x0f, 0xc0, 0x33, 0x70, 0xcc, 0x8d, 0x9c, 0x02,
	0x71, 0x2e, 0x28, 0xa7, 0x7d, 0x04, 0xd4, 0x3d, 0xd3, 0xce, 0xb4, 0x63, 0xc2, 0x87, 0x96, 0xd3,
	0x74, 0xfd, 0xba, 0xaa, 0xba, 0xba, 0xea, 0x57, 0x35, 0x0d, 0x15, 0xcc, 0xce, 0x43, 0xd7, 0x9e,
	0x44, 0x94, 0x53, 0x54, 0x76, 0x69, 0xc8, 0xc9, 0x19, 0x67, 0xf5, 0x4f, 0x87, 0x3e, 0x1f, 0xc5,
	0x7d, 0xdb, 0xa5, 0xe3, 0xf6, 0x38, 0x0e, 0xb8, 0x7f, 0x4a, 0x22, 0x76, 0xd6, 0x1e, 0x9f, 0x6d,
	0xb9, 0x23, 0xec, 0x87, 0x5b, 0xa7, 0xe3, 0xad, 0x21, 0x6d, 0x9f, 0x8e, 0x47, 0x94, 0xf1, 0xb6,
	0x74, 0xb1, 0x8b, 0x83, 0x20, 0x71, 0x53, 0xdf, 0xca, 0x18, 0x0f, 0xe9, 0x90, 0xb6, 0x25, 0xdc,
	0x8f, 0x07, 0x52, 0x92, 0x82, 0x5c, 0x25, 0xea, 0xcd, 0xab, 0x22, 0xac, 0x1f, 0x93, 0xc8, 0xc7,
	0x81, 0xff, 0x15, 0xee, 0x07, 0xe4, 0xd5, 0xd1, 0x8b, 0x98, 0x4f, 0x62, 0x8e, 0x2c, 0x00, 0x87,
	0xf0, 0x38, 0x0a, 0xbb, 0x98, 0x63, 0xd3, 0x68, 0x14, 0x5a, 0x55, 0x27, 0x83, 0xdc, 0xed, 0xef,
	0x52, 0x8f, 0x98, 0xf9, 0x86, 0xd1, 0x2a, 0x3a, 0x19, 0x04, 0x3d, 0x85, 0x47, 0x89, 0x74, 0x44,
	0x18, 0xc3, 0x43, 0x62, 0x16, 0x1a, 0x46, 0x6b, 0xc5, 0xd1, 0x41, 0xd4, 0x84, 0xea, 0x3e, 0x66,
	0x0e, 0x19, 0x63, 0x3f, 0xf4, 0xc3, 0xa1, 0x59, 0x94, 0x7e, 0x34, 0x0c, 0x4d, 0x60, 0x45, 0xca,
	0x83, 0x38, 0xf4, 0xcc, 0x52, 0xc3, 0x68, 0x55, 0x3b, 0xce, 0xed, 0xd5, 0x66, 0xe9, 0x15, 0x0e,
	0x62, 0xf2, 0xe3, 0xaf, 0x9b, 0x7b, 0x63, 0xcc, 0x47, 0xed, 0xbe, 0x3f, 0xb4, 0x0f, 0x42, 0xfe,
	0x57, 0xb9, 0x73, 0x69, 0x44, 0x44, 0xf6, 0x3c, 0xcc, 0xb1, 0xdd, 0xf1, 0x87, 0x07, 0x21, 0xdf,
	0xc5, 0x8c, 0x93, 0xc8, 0xb9, 0x3b, 0x04, 0xbd, 0x86, 0x5a, 0x92, 0x85, 0x1d, 0xd7, 0xa5, 0x71,
	0xc8, 0x99, 0xb9, 0xd4, 0x28, 0xb4, 0x2a, 0xdb, 0xdb, 0xb6, 0xaa, 0x91, 0xbd, 0x28, 0x67, 0xb6,
	0x6e, 0xb4, 0x17, 0xf2, 0xe8, 0xdc, 0x99, 0xf3, 0x84, 0x5a, 0xb0, 0xda, 0x25, 0x01, 0xe1, 0xc4,
	0x9b, 0x39, 0x5f, 0x96, 0xc9, 0x9d, 0x87, 0x85, 0x66, 0x8f, 0xc6, 0xee, 0x28, 0xa3, 0x59, 0x4e,
	0x34, 0xe7, 0x60, 0xb4, 0x0d, 0xc5, 0x43, 0x3a, 0x64, 0xe6, 0x4a, 0xc3, 0x68, 0x55, 0xb6, 0xad,
	0xc5, 0x51, 0x1e, 0xd2, 0x61, 0x12, 0x91, 0xd4, 0xad, 0x0f, 0xe0, 0xf1, 0x82, 0x70, 0xd1, 0x1a,
	0x14, 0x4e, 0xc8, 0xb9, 0x69, 0xc8, 0x62, 0x89, 0x25, 0xfa, 0x04, 0x4a, 0xa7, 0x22, 0xd3, 0xb2,
	0xc6, 0x95, 0xed, 0x77, 0x16, 0x7b, 0xd7, 0x7c, 0x39, 0x89, 0xc5, 0xb3, 0xfc, 0xc7, 0x46, 0xf3,
	0xa7, 0x3c, 0xd4, 0xef, 0x2b, 0xf6, 0x22, 0x1c, 0xb2, 0x01, 0x89, 0xd0, 0x08, 0x92, 0x3a, 0xca,
	0x13, 0xff, 0x9b, 0xc2, 0x26, 0xfe, 0x50, 0x1d, 0xca, 0xfb, 0x98, 0x1d, 0xfa, 0x63, 0x9f, 0xa7,
	0x74, 0x9d, 0xc9, 0xe8, 0x89, 0xa4, 0xd8, 0x21, 0x75, 0x4f, 0x88, 0x27, 0x89, 0x5a, 0x74, 0xee,
	0x00, 0x84, 0xa0, 0x28, 0x9b, 0x40, 0x90, 0xb3, 0xea, 0xc8, 0x35, 0x7a, 0x06, 0x65, 0xd1, 0x74,
	0xbd, 0xf3, 0x09, 0x91, 0x9c, 0xac, 0xfd, 0x59, 0xda, 0x95, 0x96, 0x33, 0xd3, 0x17, 0xad, 0x71,
	0x4c, 0x42, 0x8f, 0x44, 0x3b, 0x9e, 0x17, 0x11, 0x26, 0xd8, 0x25, 0x1c, 0xeb, 0x60, 0x13, 0xc3,
	0xff, 0xb3, 0x7e, 0x8e, 0x39, 0x8d, 0xf0, 0x90, 0xbc, 0x9c, 0x78, 0x98, 0x13, 0xb4, 0x01, 0x4b,
	0x2f, 0x06, 0x03, 0x46, 0x78, 0x92, 0x37, 0x27, 0x95, 0x66, 0xa1, 0xe6, 0x33, 0xa1, 0x9a, 0xb0,
	0xfc, 0x79, 0xe4, 0x73, 0x4e, 0x42, 0x79, 0xb5, 0xb2, 0xa3, 0xc4, 0xe6, 0x2f, 0x25, 0xfd, 0x0c,
	0xad, 0x88, 0xc2, 0x4e, 0x05, 0x98, 0x1c, 0xa2, 0x44, 0xb4, 0x0e, 0xa5, 0xe7, 0x34, 0x74, 0x55,
	0xdb, 0x27, 0x02, 0x0a, 0x61, 0xb9, 0x83, 0x03, 0x2c, 0xf0, 0x82, 0x2c, 0x66, 0xef, 0xf6, 0x6a,
	0x53, 0x41, 0x6f, 0xaf, 0x9c, 0xca, 0x23, 0xfa, 0x12, 0x6a, 0x5a, 0x52, 0x98, 0x59, 0x94, 0x5d,
	0xfa, 0xd1, 0xdf, 0x60, 0xa8, 0xad, 0x5b, 0xa6, 0xad, 0xaa, 0x83, 0x22, 0x99, 0x72, 0xb8, 0x95,
	0x92, 0x64, 0xca, 0xb1, 0xd6, 0x84, 0xaa, 0xf8, 0x1e, 0x11, 0x8e, 0x45, 0x68, 0x69, 0xe9, 0x34,
	0x0c, 0x7d, 0x00, 0x8f, 0x85, 0xdc, 0x25, 0x93, 0x80, 0x9e, 0xdf, 0x55, 0x79, 0x59, 0xaa, 0x2e,
	0xda, 0x42, 0xdf, 0x40, 0x35, 0xbd, 0x55, 0x97, 0x04, 0x1c, 0x9b, 0x65, 0x99, 0xbf, 0x2f, 0x6e,
	0xaf, 0x36, 0x35, 0xfc, 0xed, 0x25, 0x51, 0x73, 0x8b, 0x9e, 0xc3, 0xaa, 0xde, 0x96, 0x62, 0x94,
	0x88, 0x54, 0x3e, 0x7d, 0x28, 0x95, 0x4a, 0xd9, 0x99, 0x37, 0x16, 0xcc, 0xd9, 0xc7, 0xec, 0x25,
	0x23, 0x9e, 0x09, 0x92, 0x21, 0x4a, 0x14, 0x53, 0x67, 0x41, 0xe6, 0xff, 0xf5, 0xd4, 0xd1, 0x7c,
	0x65, 0xa7, 0xce, 0xd7, 0xfa, 0x5f, 0x4d, 0xcd, 0x3e, 0xf1, 0xd7, 0x3a, 0xf0, 0x48, 0xc8, 0xfd,
	0x81, 0x4f, 0xa2, 0x94, 0xd6, 0x19, 0x24, 0xcb, 0xf9, 0xbc, 0xce, 0xf9, 0x0d, 0x58, 0xea, 0xd1,
	0x89, 0xef, 0x32, 0xb3, 0x20, 0x87, 0x70, 0x2a, 0x2d, 0x1a, 0x0e, 0xcd, 0xef, 0x4b, 0x60, 0x66,
	0x8f, 0xdf, 0x91, 0xff, 0xe8, 0xe4, 0x02, 0x0f, 0xb4, 0xd5, 0x06, 0x2c, 0x89, 0x19, 0x71, 0xd0,
	0x4d, 0xcf, 0x4e, 0x25, 0x6d, 0xd6, 0x14, 0xfe, 0xe1, 0xac, 0xb1, 0x00, 0xc4, 0x3a, 0xa1, 0x5a,
	0x1a, 0x64, 0x06, 0x11, 0xfb, 0x9f, 0xe1, 0x88, 0x84, 0x5c, 0xee, 0x27, 0x4c, 0xcf, 0x20, 0x92,
	0xef, 0x52, 0x3b, 0x8d, 0x4c, 0xf1, 0x3d, 0x83, 0xa1, 0x0e, 0x3c, 0x11, 0xab, 0x3e, 0x76, 0x4f,
	0xe4, 0x4d, 0x0f, 0x42, 0x9f, 0xfb, 0x98, 0x53, 0x65, 0x93, 0x10, 0xff, 0x41, 0x1d, 0x31, 0x9d,
	0xd5, 0xbe, 0x64, 0xff, 0x8a, 0x33, 0x93, 0x55, 0x0c, 0x62, 0x2d, 0x53, 0xbd, 0x72, 0x17, 0x83,
	0xc2, 0xd0, 0xbb, 0x50, 0xdb, 0xc7, 0x6c, 0xc7, 0x75, 0xe3, 0x71, 0x1c, 0x60, 0x3e, 0x63, 0xde,
	0x1c, 0x3a, 0xf7, 0xac, 0xa9, 0x24, 0xf7, 0xcd, 0x3c, 0x6b, 0x0e, 0x61, 0x75, 0xf6, 0xa2, 0xda,
	0x8f, 0x68, 0x3c, 0x61, 0x66, 0x55, 0xb6, 0x42, 0xd3, 0x4e, 0x1e, 0x5c, 0xf6, 0xfd, 0xc2, 0x2a,
	0x55, 0x67, 0xde, 0x54, 0x45, 0xce, 0x76, 0xc5, 0xcc, 0x21, 0x91, 0xf9, 0x28, 0x79, 0xde, 0x64,
	0x31, 0xf4, 0x3e, 0xfc, 0xaf, 0x47, 0x39, 0x0e, 0x34, 0xc5, 0x9a, 0x54, 0xbc, 0xbf, 0x81, 0x3a,
	0x50, 0xdd, 0x1d, 0xf9, 0x81, 0xe7, 0x10, 0x16, 0x07, 0x9c, 0x99, 0xab, 0x0f, 0xfd, 0xf2, 0xd5,
	0xc3, 0xc4, 0xd1, 0x6c, 0xde, 0x8b, 0xf4, 0xe6, 0x98, 0x71, 0xa5, 0x06, 0xd0, 0xf5, 0x23, 0xe2,
	0x72, 0x81, 0xac, 0xe5, 0xd0, 0x3a, 0xac, 0xc9, 0x0b, 0x8e, 0x22, 0x1a, 0xd2, 0x98, 0x49, 0xd4,
	0x40, 0x26, 0xac, 0xcf, 0xa3, 0x1d, 0xec, 0x9e, 0xac, 0xe5, 0x51, 0x1d, 0x36, 0xf6, 0x8e, 0xbb,
	0x3d, 0x35, 0x07, 0x76, 0x42, 0x6f, 0xef, 0x8c, 0xb8, 0x31, 0x27, 0x6b, 0x85, 0xce, 0xde, 0xc5,
	0xb5, 0x95, 0xbb, 0xbc, 0xb6, 0x72, 0x6f, 0xae, 0x2d, 0xe3, 0xdb, 0xa9, 0x65, 0xfc, 0x30, 0xb5,
	0x8c, 0x9f, 0xa7, 0x96, 0x71, 0x31, 0xb5, 0x8c, 0xcb, 0xa9, 0x65, 0xfc, 0x36, 0xb5, 0x8c, 0xdf,
	0xa7, 0x56, 0xee, 0xcd, 0xd4, 0x32, 0xbe, 0xbb, 0xb1, 0x72, 0x17, 0x37, 0x56, 0xee, 0xf2, 0xc6,
	0xca, 0xbd, 0xae, 0xd8, 0x76, 0x5b, 0xdd, 0xae, 0xbf, 0x24, 0x5f, 0xad, 0x1f, 0xfe, 0x11, 0x00,
	0x00, 0xff, 0xff, 0x09, 0xb0, 0x39, 0x1d, 0x3a, 0x0b, 0x00, 0x00,
}

func (x SerializableCallType) String() string {
	s, ok := SerializableCallType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SerializableVMOutput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableVMOutput)
	if !ok {
		that2, ok := that.(SerializableVMOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ReturnData) != len(that1.ReturnData) {
		return false
	}
	for i := range this.ReturnData {
		if !bytes.Equal(this.ReturnData[i], that1.ReturnData[i]) {
			return false
		}
	}
	if this.ReturnCode != that1.ReturnCode {
		return false
	}
	if this.ReturnMessage != that1.ReturnMessage {
		return false
	}
	if this.GasRemaining != that1.GasRemaining {
		return false
	}
	{
		__caster := &github_com_Kalyan3104_k_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.GasRefund, that1.GasRefund) {
			return false
		}
	}
	if len(this.OutputAccounts) != len(that1.OutputAccounts) {
		return false
	}
	for i := range this.OutputAccounts {
		if !this.OutputAccounts[i].Equal(that1.OutputAccounts[i]) {
			return false
		}
	}
	if len(this.DeletedAccounts) != len(that1.DeletedAccounts) {
		return false
	}
	for i := range this.DeletedAccounts {
		if !bytes.Equal(this.DeletedAccounts[i], that1.DeletedAccounts[i]) {
			return false
		}
	}
	if len(this.TouchedAccounts) != len(that1.TouchedAccounts) {
		return false
	}
	for i := range this.TouchedAccounts {
		if !bytes.Equal(this.TouchedAccounts[i], that1.TouchedAccounts[i]) {
			return false
		}
	}
	if !this.Logs.Equal(that1.Logs) {
		return false
	}
	return true
}
func (this *SerializableOutputTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableOutputTransfer)
	if !ok {
		that2, ok := that.(SerializableOutputTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasLocked != that1.GasLocked {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !bytes.Equal(this.SenderAddress, that1.SenderAddress) {
		return false
	}
	return true
}
func (this *SerializableStorageUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableStorageUpdate)
	if !ok {
		that2, ok := that.(SerializableStorageUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Offset, that1.Offset) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Written != that1.Written {
		return false
	}
	return true
}
func (this *SerializableOutputAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableOutputAccount)
	if !ok {
		that2, ok := that.(SerializableOutputAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Balance, that1.Balance) {
			return false
		}
	}
	if len(this.StorageUpdates) != len(that1.StorageUpdates) {
		return false
	}
	for i := range this.StorageUpdates {
		if !this.StorageUpdates[i].Equal(that1.StorageUpdates[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Code, that1.Code) {
		return false
	}
	if !bytes.Equal(this.CodeMetadata, that1.CodeMetadata) {
		return false
	}
	if !bytes.Equal(this.CodeDeployerAddress, that1.CodeDeployerAddress) {
		return false
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.BalanceDelta, that1.BalanceDelta) {
			return false
		}
	}
	if len(this.OutputTransfers) != len(that1.OutputTransfers) {
		return false
	}
	for i := range this.OutputTransfers {
		if !this.OutputTransfers[i].Equal(that1.OutputTransfers[i]) {
			return false
		}
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	return true
}
func (this *SerializableLogEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableLogEntry)
	if !ok {
		that2, ok := that.(SerializableLogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Identifier, that1.Identifier) {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !bytes.Equal(this.Topics[i], that1.Topics[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *SerializableAsyncContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableAsyncContext)
	if !ok {
		that2, ok := that.(SerializableAsyncContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.CallID, that1.CallID) {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !bytes.Equal(this.CallerAddr, that1.CallerAddr) {
		return false
	}
	if !bytes.Equal(this.ParentAddr, that1.ParentAddr) {
		return false
	}
	if !bytes.Equal(this.CallerCallID, that1.CallerCallID) {
		return false
	}
	if !bytes.Equal(this.CallbackAsyncInitiatorCallID, that1.CallbackAsyncInitiatorCallID) {
		return false
	}
	if this.Callback != that1.Callback {
		return false
	}
	if !bytes.Equal(this.CallbackData, that1.CallbackData) {
		return false
	}
	if this.GasAccumulated != that1.GasAccumulated {
		return false
	}
	if !bytes.Equal(this.ReturnData, that1.ReturnData) {
		return false
	}
	if len(this.AsyncCallGroups) != len(that1.AsyncCallGroups) {
		return false
	}
	for i := range this.AsyncCallGroups {
		if !this.AsyncCallGroups[i].Equal(that1.AsyncCallGroups[i]) {
			return false
		}
	}
	if this.CallsCounter != that1.CallsCounter {
		return false
	}
	if this.TotalCallsCounter != that1.TotalCallsCounter {
		return false
	}
	if !this.ChildResults.Equal(that1.ChildResults) {
		return false
	}
	return true
}
func (this *SerializableVMOutput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&contexts.SerializableVMOutput{")
	s = append(s, "ReturnData: "+fmt.Sprintf("%#v", this.ReturnData)+",\n")
	s = append(s, "ReturnCode: "+fmt.Sprintf("%#v", this.ReturnCode)+",\n")
	s = append(s, "ReturnMessage: "+fmt.Sprintf("%#v", this.ReturnMessage)+",\n")
	s = append(s, "GasRemaining: "+fmt.Sprintf("%#v", this.GasRemaining)+",\n")
	s = append(s, "GasRefund: "+fmt.Sprintf("%#v", this.GasRefund)+",\n")
	keysForOutputAccounts := make([]string, 0, len(this.OutputAccounts))
	for k, _ := range this.OutputAccounts {
		keysForOutputAccounts = append(keysForOutputAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOutputAccounts)
	mapStringForOutputAccounts := "map[string]*SerializableOutputAccount{"
	for _, k := range keysForOutputAccounts {
		mapStringForOutputAccounts += fmt.Sprintf("%#v: %#v,", k, this.OutputAccounts[k])
	}
	mapStringForOutputAccounts += "}"
	if this.OutputAccounts != nil {
		s = append(s, "OutputAccounts: "+mapStringForOutputAccounts+",\n")
	}
	s = append(s, "DeletedAccounts: "+fmt.Sprintf("%#v", this.DeletedAccounts)+",\n")
	s = append(s, "TouchedAccounts: "+fmt.Sprintf("%#v", this.TouchedAccounts)+",\n")
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializableOutputTransfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&contexts.SerializableOutputTransfer{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "GasLocked: "+fmt.Sprintf("%#v", this.GasLocked)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "SenderAddress: "+fmt.Sprintf("%#v", this.SenderAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializableStorageUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&contexts.SerializableStorageUpdate{")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Written: "+fmt.Sprintf("%#v", this.Written)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializableOutputAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&contexts.SerializableOutputAccount{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	keysForStorageUpdates := make([]string, 0, len(this.StorageUpdates))
	for k, _ := range this.StorageUpdates {
		keysForStorageUpdates = append(keysForStorageUpdates, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStorageUpdates)
	mapStringForStorageUpdates := "map[string]*SerializableStorageUpdate{"
	for _, k := range keysForStorageUpdates {
		mapStringForStorageUpdates += fmt.Sprintf("%#v: %#v,", k, this.StorageUpdates[k])
	}
	mapStringForStorageUpdates += "}"
	if this.StorageUpdates != nil {
		s = append(s, "StorageUpdates: "+mapStringForStorageUpdates+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "CodeMetadata: "+fmt.Sprintf("%#v", this.CodeMetadata)+",\n")
	s = append(s, "CodeDeployerAddress: "+fmt.Sprintf("%#v", this.CodeDeployerAddress)+",\n")
	s = append(s, "BalanceDelta: "+fmt.Sprintf("%#v", this.BalanceDelta)+",\n")
	if this.OutputTransfers != nil {
		s = append(s, "OutputTransfers: "+fmt.Sprintf("%#v", this.OutputTransfers)+",\n")
	}
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializableLogEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&contexts.SerializableLogEntry{")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializableAsyncContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&contexts.SerializableAsyncContext{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "CallID: "+fmt.Sprintf("%#v", this.CallID)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "CallerAddr: "+fmt.Sprintf("%#v", this.CallerAddr)+",\n")
	s = append(s, "ParentAddr: "+fmt.Sprintf("%#v", this.ParentAddr)+",\n")
	s = append(s, "CallerCallID: "+fmt.Sprintf("%#v", this.CallerCallID)+",\n")
	s = append(s, "CallbackAsyncInitiatorCallID: "+fmt.Sprintf("%#v", this.CallbackAsyncInitiatorCallID)+",\n")
	s = append(s, "Callback: "+fmt.Sprintf("%#v", this.Callback)+",\n")
	s = append(s, "CallbackData: "+fmt.Sprintf("%#v", this.CallbackData)+",\n")
	s = append(s, "GasAccumulated: "+fmt.Sprintf("%#v", this.GasAccumulated)+",\n")
	s = append(s, "ReturnData: "+fmt.Sprintf("%#v", this.ReturnData)+",\n")
	if this.AsyncCallGroups != nil {
		s = append(s, "AsyncCallGroups: "+fmt.Sprintf("%#v", this.AsyncCallGroups)+",\n")
	}
	s = append(s, "CallsCounter: "+fmt.Sprintf("%#v", this.CallsCounter)+",\n")
	s = append(s, "TotalCallsCounter: "+fmt.Sprintf("%#v", this.TotalCallsCounter)+",\n")
	if this.ChildResults != nil {
		s = append(s, "ChildResults: "+fmt.Sprintf("%#v", this.ChildResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAsync(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SerializableVMOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableVMOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableVMOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Logs != nil {
		{
			size, err := m.Logs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TouchedAccounts) > 0 {
		for iNdEx := len(m.TouchedAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TouchedAccounts[iNdEx])
			copy(dAtA[i:], m.TouchedAccounts[iNdEx])
			i = encodeVarintAsync(dAtA, i, uint64(len(m.TouchedAccounts[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DeletedAccounts) > 0 {
		for iNdEx := len(m.DeletedAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeletedAccounts[iNdEx])
			copy(dAtA[i:], m.DeletedAccounts[iNdEx])
			i = encodeVarintAsync(dAtA, i, uint64(len(m.DeletedAccounts[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OutputAccounts) > 0 {
		keysForOutputAccounts := make([]string, 0, len(m.OutputAccounts))
		for k := range m.OutputAccounts {
			keysForOutputAccounts = append(keysForOutputAccounts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOutputAccounts)
		for iNdEx := len(keysForOutputAccounts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.OutputAccounts[string(keysForOutputAccounts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAsync(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForOutputAccounts[iNdEx])
			copy(dAtA[i:], keysForOutputAccounts[iNdEx])
			i = encodeVarintAsync(dAtA, i, uint64(len(keysForOutputAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAsync(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.GasRefund)
		i -= size
		if _, err := __caster.MarshalTo(m.GasRefund, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsync(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.GasRemaining != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.GasRemaining))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ReturnMessage) > 0 {
		i -= len(m.ReturnMessage)
		copy(dAtA[i:], m.ReturnMessage)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.ReturnMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReturnCode != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.ReturnCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReturnData) > 0 {
		for iNdEx := len(m.ReturnData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReturnData[iNdEx])
			copy(dAtA[i:], m.ReturnData[iNdEx])
			i = encodeVarintAsync(dAtA, i, uint64(len(m.ReturnData[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SerializableOutputTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableOutputTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableOutputTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.CallType != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.GasLocked != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.GasLocked))
		i--
		dAtA[i] = 0x18
	}
	if m.GasLimit != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x10
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsync(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SerializableStorageUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableStorageUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableStorageUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Written {
		i--
		if m.Written {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SerializableOutputAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableOutputAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableOutputAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasUsed != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x50
	}
	if len(m.OutputTransfers) > 0 {
		for iNdEx := len(m.OutputTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.BalanceDelta)
		i -= size
		if _, err := __caster.MarshalTo(m.BalanceDelta, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsync(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.CodeDeployerAddress) > 0 {
		i -= len(m.CodeDeployerAddress)
		copy(dAtA[i:], m.CodeDeployerAddress)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CodeDeployerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CodeMetadata) > 0 {
		i -= len(m.CodeMetadata)
		copy(dAtA[i:], m.CodeMetadata)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CodeMetadata)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StorageUpdates) > 0 {
		keysForStorageUpdates := make([]string, 0, len(m.StorageUpdates))
		for k := range m.StorageUpdates {
			keysForStorageUpdates = append(keysForStorageUpdates, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStorageUpdates)
		for iNdEx := len(keysForStorageUpdates) - 1; iNdEx >= 0; iNdEx-- {
			v := m.StorageUpdates[string(keysForStorageUpdates[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAsync(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForStorageUpdates[iNdEx])
			copy(dAtA[i:], keysForStorageUpdates[iNdEx])
			i = encodeVarintAsync(dAtA, i, uint64(len(keysForStorageUpdates[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAsync(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Balance)
		i -= size
		if _, err := __caster.MarshalTo(m.Balance, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsync(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Nonce != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SerializableLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintAsync(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SerializableAsyncContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableAsyncContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableAsyncContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildResults != nil {
		{
			size, err := m.ChildResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.TotalCallsCounter != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.TotalCallsCounter))
		i--
		dAtA[i] = 0x70
	}
	if m.CallsCounter != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.CallsCounter))
		i--
		dAtA[i] = 0x68
	}
	if len(m.AsyncCallGroups) > 0 {
		for iNdEx := len(m.AsyncCallGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AsyncCallGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ReturnData) > 0 {
		i -= len(m.ReturnData)
		copy(dAtA[i:], m.ReturnData)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.ReturnData)))
		i--
		dAtA[i] = 0x5a
	}
	if m.GasAccumulated != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.GasAccumulated))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CallbackData) > 0 {
		i -= len(m.CallbackData)
		copy(dAtA[i:], m.CallbackData)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CallbackData)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Callback) > 0 {
		i -= len(m.Callback)
		copy(dAtA[i:], m.Callback)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Callback)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CallbackAsyncInitiatorCallID) > 0 {
		i -= len(m.CallbackAsyncInitiatorCallID)
		copy(dAtA[i:], m.CallbackAsyncInitiatorCallID)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CallbackAsyncInitiatorCallID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CallerCallID) > 0 {
		i -= len(m.CallerCallID)
		copy(dAtA[i:], m.CallerCallID)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CallerCallID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ParentAddr) > 0 {
		i -= len(m.ParentAddr)
		copy(dAtA[i:], m.ParentAddr)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.ParentAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CallerAddr) > 0 {
		i -= len(m.CallerAddr)
		copy(dAtA[i:], m.CallerAddr)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CallerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.CallType != 0 {
		i = encodeVarintAsync(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CallID) > 0 {
		i -= len(m.CallID)
		copy(dAtA[i:], m.CallID)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.CallID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAsync(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsync(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SerializableVMOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReturnData) > 0 {
		for _, b := range m.ReturnData {
			l = len(b)
			n += 1 + l + sovAsync(uint64(l))
		}
	}
	if m.ReturnCode != 0 {
		n += 1 + sovAsync(uint64(m.ReturnCode))
	}
	l = len(m.ReturnMessage)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.GasRemaining != 0 {
		n += 1 + sovAsync(uint64(m.GasRemaining))
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.GasRefund)
		n += 1 + l + sovAsync(uint64(l))
	}
	if len(m.OutputAccounts) > 0 {
		for k, v := range m.OutputAccounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAsync(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAsync(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAsync(uint64(mapEntrySize))
		}
	}
	if len(m.DeletedAccounts) > 0 {
		for _, b := range m.DeletedAccounts {
			l = len(b)
			n += 1 + l + sovAsync(uint64(l))
		}
	}
	if len(m.TouchedAccounts) > 0 {
		for _, b := range m.TouchedAccounts {
			l = len(b)
			n += 1 + l + sovAsync(uint64(l))
		}
	}
	if m.Logs != nil {
		l = m.Logs.Size()
		n += 1 + l + sovAsync(uint64(l))
	}
	return n
}

func (m *SerializableOutputTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovAsync(uint64(m.GasLimit))
	}
	if m.GasLocked != 0 {
		n += 1 + sovAsync(uint64(m.GasLocked))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.CallType != 0 {
		n += 1 + sovAsync(uint64(m.CallType))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	return n
}

func (m *SerializableStorageUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.Written {
		n += 2
	}
	return n
}

func (m *SerializableOutputAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovAsync(uint64(m.Nonce))
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Balance)
		n += 1 + l + sovAsync(uint64(l))
	}
	if len(m.StorageUpdates) > 0 {
		for k, v := range m.StorageUpdates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAsync(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAsync(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAsync(uint64(mapEntrySize))
		}
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.CodeMetadata)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.CodeDeployerAddress)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.BalanceDelta)
		n += 1 + l + sovAsync(uint64(l))
	}
	if len(m.OutputTransfers) > 0 {
		for _, e := range m.OutputTransfers {
			l = e.Size()
			n += 1 + l + sovAsync(uint64(l))
		}
	}
	if m.GasUsed != 0 {
		n += 1 + sovAsync(uint64(m.GasUsed))
	}
	return n
}

func (m *SerializableLogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, b := range m.Topics {
			l = len(b)
			n += 1 + l + sovAsync(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	return n
}

func (m *SerializableAsyncContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.CallID)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.CallType != 0 {
		n += 1 + sovAsync(uint64(m.CallType))
	}
	l = len(m.CallerAddr)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.ParentAddr)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.CallerCallID)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.CallbackAsyncInitiatorCallID)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	l = len(m.CallbackData)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if m.GasAccumulated != 0 {
		n += 1 + sovAsync(uint64(m.GasAccumulated))
	}
	l = len(m.ReturnData)
	if l > 0 {
		n += 1 + l + sovAsync(uint64(l))
	}
	if len(m.AsyncCallGroups) > 0 {
		for _, e := range m.AsyncCallGroups {
			l = e.Size()
			n += 1 + l + sovAsync(uint64(l))
		}
	}
	if m.CallsCounter != 0 {
		n += 1 + sovAsync(uint64(m.CallsCounter))
	}
	if m.TotalCallsCounter != 0 {
		n += 1 + sovAsync(uint64(m.TotalCallsCounter))
	}
	if m.ChildResults != nil {
		l = m.ChildResults.Size()
		n += 1 + l + sovAsync(uint64(l))
	}
	return n
}

func sovAsync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsync(x uint64) (n int) {
	return sovAsync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SerializableVMOutput) String() string {
	if this == nil {
		return "nil"
	}
	keysForOutputAccounts := make([]string, 0, len(this.OutputAccounts))
	for k, _ := range this.OutputAccounts {
		keysForOutputAccounts = append(keysForOutputAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOutputAccounts)
	mapStringForOutputAccounts := "map[string]*SerializableOutputAccount{"
	for _, k := range keysForOutputAccounts {
		mapStringForOutputAccounts += fmt.Sprintf("%v: %v,", k, this.OutputAccounts[k])
	}
	mapStringForOutputAccounts += "}"
	s := strings.Join([]string{`&SerializableVMOutput{`,
		`ReturnData:` + fmt.Sprintf("%v", this.ReturnData) + `,`,
		`ReturnCode:` + fmt.Sprintf("%v", this.ReturnCode) + `,`,
		`ReturnMessage:` + fmt.Sprintf("%v", this.ReturnMessage) + `,`,
		`GasRemaining:` + fmt.Sprintf("%v", this.GasRemaining) + `,`,
		`GasRefund:` + fmt.Sprintf("%v", this.GasRefund) + `,`,
		`OutputAccounts:` + mapStringForOutputAccounts + `,`,
		`DeletedAccounts:` + fmt.Sprintf("%v", this.DeletedAccounts) + `,`,
		`TouchedAccounts:` + fmt.Sprintf("%v", this.TouchedAccounts) + `,`,
		`Logs:` + strings.Replace(this.Logs.String(), "SerializableLogEntry", "SerializableLogEntry", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableOutputTransfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableOutputTransfer{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`GasLocked:` + fmt.Sprintf("%v", this.GasLocked) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`SenderAddress:` + fmt.Sprintf("%v", this.SenderAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableStorageUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableStorageUpdate{`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Written:` + fmt.Sprintf("%v", this.Written) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableOutputAccount) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOutputTransfers := "[]*SerializableOutputTransfer{"
	for _, f := range this.OutputTransfers {
		repeatedStringForOutputTransfers += strings.Replace(f.String(), "SerializableOutputTransfer", "SerializableOutputTransfer", 1) + ","
	}
	repeatedStringForOutputTransfers += "}"
	keysForStorageUpdates := make([]string, 0, len(this.StorageUpdates))
	for k, _ := range this.StorageUpdates {
		keysForStorageUpdates = append(keysForStorageUpdates, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStorageUpdates)
	mapStringForStorageUpdates := "map[string]*SerializableStorageUpdate{"
	for _, k := range keysForStorageUpdates {
		mapStringForStorageUpdates += fmt.Sprintf("%v: %v,", k, this.StorageUpdates[k])
	}
	mapStringForStorageUpdates += "}"
	s := strings.Join([]string{`&SerializableOutputAccount{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`StorageUpdates:` + mapStringForStorageUpdates + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`CodeMetadata:` + fmt.Sprintf("%v", this.CodeMetadata) + `,`,
		`CodeDeployerAddress:` + fmt.Sprintf("%v", this.CodeDeployerAddress) + `,`,
		`BalanceDelta:` + fmt.Sprintf("%v", this.BalanceDelta) + `,`,
		`OutputTransfers:` + repeatedStringForOutputTransfers + `,`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableLogEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableLogEntry{`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Topics:` + fmt.Sprintf("%v", this.Topics) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializableAsyncContext) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAsyncCallGroups := "[]*SerializableAsyncCallGroup{"
	for _, f := range this.AsyncCallGroups {
		repeatedStringForAsyncCallGroups += strings.Replace(fmt.Sprintf("%v", f), "SerializableAsyncCallGroup", "vmhost.SerializableAsyncCallGroup", 1) + ","
	}
	repeatedStringForAsyncCallGroups += "}"
	s := strings.Join([]string{`&SerializableAsyncContext{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`CallID:` + fmt.Sprintf("%v", this.CallID) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`CallerAddr:` + fmt.Sprintf("%v", this.CallerAddr) + `,`,
		`ParentAddr:` + fmt.Sprintf("%v", this.ParentAddr) + `,`,
		`CallerCallID:` + fmt.Sprintf("%v", this.CallerCallID) + `,`,
		`CallbackAsyncInitiatorCallID:` + fmt.Sprintf("%v", this.CallbackAsyncInitiatorCallID) + `,`,
		`Callback:` + fmt.Sprintf("%v", this.Callback) + `,`,
		`CallbackData:` + fmt.Sprintf("%v", this.CallbackData) + `,`,
		`GasAccumulated:` + fmt.Sprintf("%v", this.GasAccumulated) + `,`,
		`ReturnData:` + fmt.Sprintf("%v", this.ReturnData) + `,`,
		`AsyncCallGroups:` + repeatedStringForAsyncCallGroups + `,`,
		`CallsCounter:` + fmt.Sprintf("%v", this.CallsCounter) + `,`,
		`TotalCallsCounter:` + fmt.Sprintf("%v", this.TotalCallsCounter) + `,`,
		`ChildResults:` + strings.Replace(this.ChildResults.String(), "SerializableVMOutput", "SerializableVMOutput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAsync(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SerializableVMOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableVMOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableVMOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnData = append(m.ReturnData, make([]byte, postIndex-iNdEx))
			copy(m.ReturnData[len(m.ReturnData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRemaining", wireType)
			}
			m.GasRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasRemaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRefund", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.GasRefund = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputAccounts == nil {
				m.OutputAccounts = make(map[string]*SerializableOutputAccount)
			}
			var mapkey string
			var mapvalue *SerializableOutputAccount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAsync
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAsync
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAsync
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAsync
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAsync
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAsync
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAsync
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SerializableOutputAccount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAsync(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAsync
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OutputAccounts[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAccounts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAccounts = append(m.DeletedAccounts, make([]byte, postIndex-iNdEx))
			copy(m.DeletedAccounts[len(m.DeletedAccounts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TouchedAccounts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TouchedAccounts = append(m.TouchedAccounts, make([]byte, postIndex-iNdEx))
			copy(m.TouchedAccounts[len(m.TouchedAccounts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = &SerializableLogEntry{}
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableOutputTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableOutputTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableOutputTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLocked", wireType)
			}
			m.GasLocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLocked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= SerializableCallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = append(m.SenderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderAddress == nil {
				m.SenderAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableStorageUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableStorageUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableStorageUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = append(m.Offset[:0], dAtA[iNdEx:postIndex]...)
			if m.Offset == nil {
				m.Offset = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Written", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Written = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableOutputAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableOutputAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableOutputAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Balance = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageUpdates == nil {
				m.StorageUpdates = make(map[string]*SerializableStorageUpdate)
			}
			var mapkey string
			var mapvalue *SerializableStorageUpdate
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAsync
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAsync
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAsync
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAsync
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAsync
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAsync
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAsync
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SerializableStorageUpdate{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAsync(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAsync
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StorageUpdates[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMetadata = append(m.CodeMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeMetadata == nil {
				m.CodeMetadata = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeDeployerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeDeployerAddress = append(m.CodeDeployerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeDeployerAddress == nil {
				m.CodeDeployerAddress = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceDelta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.BalanceDelta = tmp
				}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputTransfers = append(m.OutputTransfers, &SerializableOutputTransfer{})
			if err := m.OutputTransfers[len(m.OutputTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = append(m.Identifier[:0], dAtA[iNdEx:postIndex]...)
			if m.Identifier == nil {
				m.Identifier = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, make([]byte, postIndex-iNdEx))
			copy(m.Topics[len(m.Topics)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializableAsyncContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableAsyncContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableAsyncContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallID = append(m.CallID[:0], dAtA[iNdEx:postIndex]...)
			if m.CallID == nil {
				m.CallID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= SerializableCallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAddr = append(m.CallerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.CallerAddr == nil {
				m.CallerAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentAddr = append(m.ParentAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentAddr == nil {
				m.ParentAddr = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerCallID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerCallID = append(m.CallerCallID[:0], dAtA[iNdEx:postIndex]...)
			if m.CallerCallID == nil {
				m.CallerCallID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackAsyncInitiatorCallID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackAsyncInitiatorCallID = append(m.CallbackAsyncInitiatorCallID[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackAsyncInitiatorCallID == nil {
				m.CallbackAsyncInitiatorCallID = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackData = append(m.CallbackData[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackData == nil {
				m.CallbackData = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAccumulated", wireType)
			}
			m.GasAccumulated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasAccumulated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnData = append(m.ReturnData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReturnData == nil {
				m.ReturnData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncCallGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsyncCallGroups = append(m.AsyncCallGroups, &vmhost.SerializableAsyncCallGroup{})
			if err := m.AsyncCallGroups[len(m.AsyncCallGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsCounter", wireType)
			}
			m.CallsCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallsCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCallsCounter", wireType)
			}
			m.TotalCallsCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCallsCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChildResults == nil {
				m.ChildResults = &SerializableVMOutput{}
			}
			if err := m.ChildResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsync = fmt.Errorf("proto: unexpected end of group")
)
